cmake_minimum_required(VERSION 2.8.3)
project(object_manager)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS roscpp std_msgs sensor_msgs geometry_msgs object_manager_msgs pcl_ros message_generation qt_build cv_bridge semantic_map metaroom_xml_parser convex_segmentation k_means_tree observation_registration_services)

set(CMAKE_CXX_FLAGS "-O4 -fPIC -std=c++0x -fpermissive ${CMAKE_CXX_FLAGS}")

find_package(PCL 1.7 REQUIRED)
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

# OpenMP
find_package(OpenMP)
if(OPENMP_FOUND)
message (STATUS “OpenMP found”)
set(CMAKE_CXX_FLAGS "${OpenMP_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${OpenMP_C_FLAGS} ${CMAKE_C_FLAGS}")
else(OPENMP_FOUND)
message (STATUS “OpenMP not found”)
endif()

rosbuild_prepare_qt4(QtCore QtXml)

catkin_package(
   INCLUDE_DIRS include
   LIBRARIES dynamic_object
   CATKIN_DEPENDS message_runtime sensor_msgs std_msgs cv_bridge semantic_map metaroom_xml_parser qt_build geometry_msgs pcl_ros observation_registration_services
   DEPENDS PCL
)

set(HDRS

    include/object_manager/dynamic_object.h
    include/object_manager/dynamic_object_utilities.h
    include/object_manager/dynamic_object_xml_parser.h
    include/object_manager/dynamic_object_mongodb_interface.h
)

set(SRCS

    src/dynamic_object.cpp
    src/dynamic_object_utilities.cpp
    src/dynamic_object_xml_parser.cpp
    src/dynamic_object_mongodb_interface.cpp
)

include_directories(include
  ${catkin_INCLUDE_DIRS}
)

add_library(dynamic_object ${HDRS} ${SRCS})

add_executable(object_manager_node   ${HDRS} ${SRCS} include/object_manager/object_manager.h src/object_manager.cpp src/object_manager_main.cpp)
add_dependencies(object_manager_node quasimodo_msgs_generate_messages_cpp object_manager_node_generate_messages_cpp)

add_executable(load_objects_from_mongo ${HDRS} ${SRCS} src/load_objects_from_mongo.cpp)
add_dependencies(load_objects_from_mongo quasimodo_msgs_generate_messages_cpp load_objects_from_mongo_generate_messages_cpp)

add_executable(dynamic_object_compute_mask_server ${HDRS} ${SRCS} src/dynamic_object_compute_mask_server.cpp)
add_dependencies(dynamic_object_compute_mask_server quasimodo_msgs_generate_messages_cpp object_manager_generate_messages_cpp observation_registration_services_generate_messages_cpp)

 target_link_libraries(dynamic_object
   ${catkin_LIBRARIES}
   ${PCL_LIBRARIES}
   ${QT_LIBRARIES}
  )

 target_link_libraries(object_manager_node
   ${catkin_LIBRARIES}
   ${PCL_LIBRARIES}
   ${QT_LIBRARIES}
  )

 target_link_libraries(load_objects_from_mongo
   ${catkin_LIBRARIES}
   ${PCL_LIBRARIES}
   ${QT_LIBRARIES}
  )

 target_link_libraries(dynamic_object_compute_mask_server
   ${catkin_LIBRARIES}
   ${PCL_LIBRARIES}
   ${QT_LIBRARIES}
  )


############################# INSTALL TARGETS

install(TARGETS dynamic_object object_manager_node load_objects_from_mongo dynamic_object_compute_mask_server
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(DIRECTORY include/object_manager/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
)

